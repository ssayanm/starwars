{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","state","films","species","fetch","this","props","then","response","json","setState","name","fetchPromises","map","filmUrl","i","Promise","all","results","film","episode_id","title","className","key","Component","CardList","data","user","url","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","App","people","searchfield","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAsDeA,G,kBAlDb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACTC,MAAM,GACNC,QAAQ,IAJD,E,iFAQQ,IAAD,OAElBC,MAAMC,KAAKC,MAAMH,SACdI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GAAO,OAAI,EAAKO,SAAS,CAAEP,QAASA,EAAQQ,UAGpD,IAAMC,EAAgBP,KAAKC,MAAMJ,MAAMW,KAAI,SAACC,EAASC,GACnD,OAAOX,MAAMU,GACVP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,aAI/BO,QAAQC,IAAIL,GAAeL,MAAK,SAAAW,GAC9B,EAAKR,SAAS,CAACR,MAAOgB,EAAQL,KAAI,SAAAM,GAAU,MAAO,CAACA,EAAKC,WAAY,IAAK,IAAI,IAAID,EAAKE,iB,+BAIlF,IAAD,EACoBhB,KAAKJ,MAAxBE,EADD,EACCA,QAASD,EADV,EACUA,MACRS,EAASN,KAAKC,MAAdK,KACT,OACE,yBAAKW,UAAU,gEACd,yBAAKA,UAAU,OACZ,4BAAKX,EAAL,KAAaR,EAAb,KACG,6BAEA,+CACH,wBAAImB,UAAU,YACNpB,EAAMW,KAAI,SAACM,EAAKR,EAAMI,GAAZ,OACV,wBAAIQ,IAAKR,GAChBI,a,GAxCSK,cCsBJC,EAtBE,SAACnB,GAAW,IACpBoB,EAASpB,EAAToB,KAER,OACI,yBAAKJ,UAAU,kBACZI,EAAKb,KAAI,SAACc,EAAMZ,GACrB,OACC,kBAAC,EAAD,CACCQ,IAAKI,EAAKC,IACVA,IAAMD,EAAKC,IACXjB,KAAMgB,EAAKhB,KACXR,QAASwB,EAAKxB,QACdD,MAAOyB,EAAKzB,aCLF2B,EARA,SAACvB,GACf,OACI,yBAAKgB,UAAU,KAAKQ,MAAO,CAACC,UAAW,SAAUC,OAAQ,iBAAkBC,OAAQ,UACjF3B,EAAM4B,WCkBEC,E,YApBd,aAAc,IAAD,8BACT,+CACKlC,MAAQ,CACZmC,UAAS,GAHD,E,+EAOOC,EAAOC,GACxBjC,KAAKK,SAAU,CAAC0B,UAAU,M,+BAI1B,OAAG/B,KAAKJ,MAAMmC,SACN,uCAEA/B,KAAKC,MAAM4B,a,GAhBKV,aC4Dbe,G,kBA/Cb,aAAc,IAAD,8BACX,+CACKtC,MAAQ,CACTuC,OAAQ,GACRtC,MAAM,GACNwB,KAAK,GACLvB,QAAQ,GACRsC,YAAY,IAPL,E,iFAuBM,IAAD,OAGhBrC,MAFY,gCAGTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAiC,GAAM,OAAI,EAAK9B,SAAS,CAAEgB,KAAMc,EAAOtB,e,+BAGxC,IAAD,EACmCb,KAAKJ,MAAtCuC,EADF,EACEA,OAAQtC,EADV,EACUA,MAAOC,EADjB,EACiBA,QAASuB,EAD1B,EAC0BA,KAChC,OACI,yBAAKJ,UAAU,UACb,wBAAIA,UAAU,MAAd,iBAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUI,KAAMA,EAAMc,OAAQA,EAAQtC,MAAOA,EAAOC,QAASA,W,GAxCzDqB,cCFEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.cdc6b662.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './card.css';\n\nclass Card extends Component {\n  constructor(){\n    super();\n    this.state = {\n        films:[],\n        species:[]\n    }\n  }\n  \n  componentDidMount() {\n  \t//fetching species\n    fetch(this.props.species)\n      .then(response => response.json())\n      .then(species => this.setState({ species: species.name }))\n\n    //films\n    const fetchPromises = this.props.films.map((filmUrl, i) => { \n      return fetch(filmUrl) \n        .then(response => response.json()\n        )\n    })\n\n    Promise.all(fetchPromises).then(results => {\n      this.setState({films: results.map(film => { return [film.episode_id, ' ' ,'-',' ',film.title] })})\n    });\n\n}\n  render(){ \n  \tconst { species, films } = this.state;\n    const { name } = this.props;\n  \treturn(\n  \t\t <div className=\"card bg-yellow tc dib br1 pa1 ma4 grow bw1 shadow-1 w-25 br4\">\n\t    \t<div className=\"pa2\">\n\t      \t\t<h2>{name} ({species})</h2>\n            <hr/>\n\n            <h4>Featured Movies</h4>\n\t      \t\t<ul className=\"ul-style\">\n              \t\t{films.map((film,name, i) => (\n\t                <li key={i}>\n\t   \t\t\t\t\t{film}\n\t                </li>\n              \t\t))}\n           \t\t </ul>\n\t      \t</div>\n      </div>\n  \t);\n  } \n}  \n\n\nexport default Card;\n\n\n","import React from 'react';\nimport Card from '../components/Card';\n\nconst CardList = (props) => {\n\tconst { data } = props;\n\n\treturn (\n\t    <div className='CardContainer '>\t    \t\n\t    \t{ data.map((user, i) => {\n\t\t\treturn ( \n\t\t\t\t<Card \n\t\t\t\t\tkey={user.url}\n\t\t\t\t\turl ={user.url}\n\t\t\t\t\tname={user.name} \n\t\t\t\t\tspecies={user.species}\n\t\t\t\t\tfilms={user.films}\n\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\n\t\t\t})\n\t\t}\n\t    </div>\n  );\n}\n\nexport default CardList;\n\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t    <div className='tc' style={{overflowY: 'scroll', border: '1px solid #000', height: '700px'}}>\n\t    \t{props.children}\n\t    </div>\n  );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(){\n\t    super();\n\t    this.state = {\n\t    \thasError:false\n\t    }\n  \t}\n\n  \tcomponentDidCatch(error, info){\n  \t\tthis.setState( {hasError: true })\n  \t}\n\n  \trender(){\n  \t\tif(this.state.hasError){\n  \t\t\treturn <h1>Opps !!</h1>\n  \t\t} else {\n  \t\t\treturn this.props.children;\n  \t\t}\n  \t}\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n//import SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n// const urls = [\n//   'https://swapi.co/api/people',\n//   'https://swapi.co/api/films',\n//   'https://swapi.co/api/species'\n// ]\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n        people: [],\n        films:[],\n        data:[],\n        species:[],\n        searchfield:''\n    }\n  }\n\n// componentDidMount() {\n//     async function asyncData() {\n//     const [people, films, species] = await Promise.all(urls.map(async function(url) {\n//           const response = await fetch(url);\n//           return response.json();\n//       }));\n//     return [people.results, films.results, species.results];\n//   }\n//     const result = asyncData();\n//     result.then(data => this.setState({people: data[0], films: data[1], species: data[1]}));\n//  } \n\ncomponentDidMount() {\n    const url = 'https://swapi.co/api/people/';\n\n    fetch(url)\n      .then(response => response.json())\n      .then(people => this.setState({ data: people.results }))   \n    }\n\n  render(){  \n    const { people, films, species, data } = this.state;\n    return (\n        <div className=\"App tc\">\n          <h1 className=\"f1\">Star Wars Api</h1>\n          {/*<SearchBox searchChange={this.onSearchChange}/>*/}\n          <Scroll>\n            <ErrorBoundary>\n              <CardList data={data} people={people} films={films} species={species}/>\n            </ErrorBoundary>  \n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}